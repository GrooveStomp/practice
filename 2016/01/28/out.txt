<preprocessor command>#include <stdio.h>
<keyword>char
<symbol>=
<character literal>'"'
<symbol>;
<comment>/* Whoa! */
<preprocessor command>#include <stdbool.h>
<preprocessor command>#include "file_buffer.c"
<preprocessor command>#define BUFFER_SIZE kilobytes(30)
<preprocessor command>#define ARRAY_SIZE(Array) (sizeof((Array)) / sizeof((Array)[0]))
<preprocessor command>#define foo(a,b) \
  (a) + (b)
<keyword>void
<symbol>(
<keyword>char
<symbol>*
<symbol>)
<symbol>{
<keyword>int
<symbol>(
<symbol>,
<string literal>"%s\n"
<symbol>,
<symbol>)
<symbol>;
<symbol>(
<symbol>)
<symbol>;
<symbol>}
<keyword>void
<symbol>(
<symbol>)
<symbol>{
<keyword>int
<symbol>(
<string literal>"Usage: program file\n"
<symbol>)
<symbol>;
<keyword>int
<symbol>(
<string literal>"  file: must be a file in this directory\n"
<symbol>)
<symbol>;
<symbol>(
<string literal>"  Specify '-h' or '--help' for this help text\n"
<symbol>)
<symbol>;
<symbol>(
<symbol>)
<symbol>;
<symbol>}
<symbol>(
<keyword>char
<keyword>char
<symbol>)
<symbol>{
<symbol>(
<keyword>char
<symbol>=
<symbol>=
<character literal>' '
<symbol>|
<symbol>|
<keyword>char
<symbol>=
<symbol>=
<character literal>'\r'
<symbol>|
<symbol>|
<keyword>char
<symbol>=
<symbol>=
<character literal>'\n'
<symbol>|
<symbol>|
<keyword>char
<symbol>=
<symbol>=
<character literal>'\t'
<symbol>)
<symbol>;
<symbol>}
<symbol>(
<keyword>char
<keyword>char
<symbol>)
<symbol>{
<keyword>char
<symbol>[
<symbol>]
<symbol>=
<symbol>{
<character literal>'#'
<symbol>,
<character literal>'{'
<symbol>,
<character literal>'}'
<symbol>,
<character literal>'['
<symbol>,
<character literal>']'
<symbol>,
<character literal>','
<symbol>,
<character literal>';'
<symbol>,
<character literal>'-'
<symbol>,
<character literal>'+'
<symbol>,
<character literal>'='
<symbol>,
<character literal>'*'
<symbol>,
<character literal>'^'
<symbol>,
<character literal>'&'
<symbol>,
<character literal>'%'
<symbol>,
<character literal>'$'
<symbol>,
<character literal>'?'
<symbol>,
<character literal>'<'
<symbol>,
<character literal>'>'
<symbol>,
<character literal>'('
<symbol>,
<character literal>')'
<symbol>,
<character literal>'!'
<symbol>,
<character literal>'/'
<symbol>,
<character literal>'|'
<symbol>,
<character literal>'~'
<symbol>,
<character literal>'.'
<symbol>,
<character literal>'\''
<symbol>,
<character literal>'"'
<symbol>}
<symbol>;
<keyword>for
<symbol>(
<keyword>int
<symbol>=
<symbol>;
<symbol><
<symbol>(
<symbol>)
<symbol>;
<symbol>+
<symbol>+
<symbol>)
<symbol>{
<symbol>(
<keyword>char
<symbol>=
<symbol>=
<symbol>[
<symbol>]
<symbol>)
<keyword>return
<symbol>;
<symbol>}
<keyword>return
<symbol>;
<symbol>}
<keyword>char
<symbol>(
<keyword>const
<symbol>*
<symbol>,
<symbol>*
<keyword>char
<symbol>)
<symbol>{
<keyword>char
<symbol>*
<symbol>;
<keyword>char
<symbol>*
<symbol>;
<comment>/* TODO(AARON): Assuming entirety of string fits within both buffer_t and tmp_buffer. */
<keyword>char
<symbol>[
<symbol>]
<symbol>=
<symbol>{
<symbol>}
<symbol>;
<symbol>(
<symbol>,
<symbol>-
<symbol>>
<symbol>,
<symbol>(
<symbol>-
<symbol>>
<symbol>,
<symbol>)
<symbol>)
<symbol>;
<keyword>char
<symbol>*
<symbol>;
<keyword>if
<symbol>(
<symbol>(
<symbol>=
<symbol>(
<symbol>,
<string literal>"'"
<symbol>)
<symbol>)
<symbol>!
<symbol>=
<symbol>)
<symbol>{
<keyword>char
<symbol>*
<symbol>=
<symbol>+
<symbol>;
<keyword>if
<symbol>(
<symbol>*
<symbol>!
<symbol>=
<character literal>'\''
<symbol>)
<symbol>+
<symbol>=
<symbol>;
<keyword>if
<symbol>(
<symbol>*
<symbol>!
<symbol>=
<character literal>'\''
<symbol>)
<keyword>return
<symbol>;
<keyword>if
<symbol>(
<symbol>*
<symbol>=
<symbol>=
<character literal>'\''
<symbol>&
<symbol>&
<symbol>*
<symbol>(
<symbol>-
<symbol>)
<symbol>=
<symbol>=
<symbol>'
<symbol>'
<symbol>)
<symbol>+
<symbol>=
<symbol>;
<keyword>if
<symbol>(
<symbol>*
<symbol>!
<symbol>=
<character literal>'\''
<symbol>)
<keyword>return
<symbol>;
<keyword>char
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>>
<symbol>+
<symbol>(
<symbol>-
<symbol>)
<symbol>;
<keyword>char
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>+
<symbol>;
<keyword>char
<symbol>-
<symbol>>
<symbol>=
<keyword>char
<symbol>-
<symbol>>
<symbol>;
<keyword>return
<symbol>;
<symbol>}
<keyword>return
<symbol>;
<symbol>}
<symbol>(
<keyword>const
<symbol>*
<symbol>,
<symbol>*
<symbol>)
<symbol>{
<keyword>char
<symbol>*
<symbol>;
<keyword>char
<symbol>*
<symbol>;
<comment>/* TODO(AARON): Assuming entirety of string fits within both buffer_t and tmp_buffer. */
<keyword>char
<symbol>[
<symbol>(
<symbol>)
<symbol>]
<symbol>=
<symbol>{
<symbol>}
<symbol>;
<symbol>(
<symbol>,
<symbol>-
<symbol>>
<symbol>,
<symbol>(
<symbol>-
<symbol>>
<symbol>,
<symbol>(
<symbol>)
<symbol>-
<symbol>)
<symbol>)
<symbol>;
<keyword>if
<symbol>(
<symbol>(
<symbol>=
<symbol>(
<symbol>,
<string literal>"\""
<symbol>)
<symbol>)
<symbol>!
<symbol>=
<symbol>)
<symbol>{
<comment>/* TODO(AARON): Handle nested strings. */
<symbol>=
<symbol>(
<symbol>+
<symbol>,
<string literal>"\""
<symbol>)
<symbol>;
<keyword>char
<symbol>*
<symbol>;
<keyword>while
<symbol>(
<symbol>*
<symbol>(
<symbol>-
<symbol>)
<symbol>=
<symbol>=
<symbol>'
<symbol>'
<symbol>|
<symbol>|
<symbol>(
<symbol>-
<symbol>,
<string literal>"'\"'"
<symbol>,
<symbol>)
<symbol>=
<symbol>=
<symbol>)
<symbol>{
<symbol>=
<symbol>+
<symbol>;
<keyword>if
<symbol>(
<symbol>>
<symbol>=
<symbol>+
<symbol>(
<symbol>-
<symbol>>
<symbol>,
<symbol>(
<symbol>)
<symbol>-
<symbol>)
<symbol>)
<symbol>(
<string literal>"Couldn't terminate string properly"
<symbol>)
<symbol>;
<symbol>=
<symbol>(
<symbol>,
<string literal>"\""
<symbol>)
<symbol>;
<symbol>}
<comment>/* TODO(AARON): Raise a big fuss if string_close_match is NULL. */
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>>
<symbol>+
<symbol>(
<symbol>-
<symbol>)
<symbol>;
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>+
<symbol>;
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>>
<symbol>;
<keyword>return
<symbol>;
<symbol>}
<keyword>return
<symbol>;
<symbol>}
<symbol>(
<keyword>const
<symbol>*
<symbol>,
<symbol>*
<symbol>)
<symbol>{
<keyword>char
<symbol>*
<symbol>;
<keyword>char
<symbol>*
<symbol>;
<comment>/* TODO(AARON): Assuming entirety of comment fits within both buffer_t and tmp_buffer. */
<keyword>char
<symbol>[
<symbol>(
<symbol>)
<symbol>]
<symbol>=
<symbol>{
<symbol>}
<symbol>;
<symbol>(
<symbol>,
<symbol>-
<symbol>>
<symbol>,
<symbol>(
<symbol>-
<symbol>>
<symbol>,
<symbol>(
<symbol>)
<symbol>-
<symbol>)
<symbol>)
<symbol>;
<keyword>if
<symbol>(
<symbol>(
<symbol>=
<symbol>(
<symbol>,
<string literal>"/*"
<symbol>)
<symbol>)
<symbol>!
<symbol>=
<symbol>)
<symbol>{
<comment>/* TODO(AARON): Handle nested comments. */
<symbol>=
<symbol>(
<symbol>,
<string literal>"*/"
<symbol>)
<symbol>;
<comment>/* TODO(AARON): Raise a big fuss if comment_close_match is NULL. */
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>>
<symbol>+
<symbol>(
<symbol>-
<symbol>)
<symbol>;
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>+
<symbol>;
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>>
<symbol>;
<keyword>return
<symbol>;
<symbol>}
<keyword>return
<symbol>;
<symbol>}
<symbol>(
<keyword>const
<symbol>*
<symbol>,
<symbol>*
<symbol>)
<symbol>{
<keyword>char
<symbol>*
<symbol>[
<symbol>]
<symbol>=
<symbol>{
<string literal>"auto"
<symbol>,
<string literal>"break"
<symbol>,
<string literal>"case"
<symbol>,
<string literal>"char"
<symbol>,
<string literal>"const"
<symbol>,
<string literal>"continue"
<symbol>,
<string literal>"default"
<symbol>,
<string literal>"do"
<symbol>,
<string literal>"double"
<symbol>,
<string literal>"else"
<symbol>,
<string literal>"enum"
<symbol>,
<string literal>"extern"
<symbol>,
<string literal>"float"
<symbol>,
<string literal>"for"
<symbol>,
<string literal>"goto"
<symbol>,
<string literal>"if"
<symbol>,
<string literal>"int"
<symbol>,
<string literal>"long"
<symbol>,
<string literal>"register"
<symbol>,
<string literal>"return"
<symbol>,
<string literal>"short"
<symbol>,
<string literal>"signed"
<symbol>,
<string literal>"sizeof"
<symbol>,
<string literal>"static"
<symbol>,
<string literal>"struct"
<symbol>,
<string literal>"switch"
<symbol>,
<string literal>"typedef"
<symbol>,
<string literal>"union"
<symbol>,
<string literal>"unsigned"
<symbol>,
<string literal>"void"
<symbol>,
<string literal>"volatile"
<symbol>,
<string literal>"while"
<symbol>}
<symbol>;
<keyword>char
<symbol>[
<symbol>]
<symbol>=
<symbol>{
<symbol>}
<symbol>;
<comment>/* NOTE(AARON): No keyword is even close to 20 characters long. */
<symbol>(
<symbol>,
<symbol>-
<symbol>>
<symbol>,
<symbol>(
<symbol>-
<symbol>>
<symbol>,
<symbol>)
<symbol>)
<symbol>;
<keyword>char
<symbol>*
<symbol>;
<keyword>for
<symbol>(
<keyword>int
<symbol>=
<symbol>;
<symbol><
<symbol>(
<symbol>)
<symbol>;
<symbol>+
<symbol>+
<symbol>)
<symbol>{
<keyword>if
<symbol>(
<symbol>(
<symbol>=
<symbol>(
<symbol>,
<symbol>[
<symbol>]
<symbol>)
<symbol>)
<symbol>!
<symbol>=
<symbol>)
<symbol>{
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>>
<symbol>+
<symbol>(
<symbol>-
<symbol>)
<symbol>;
<symbol>-
<symbol>>
<symbol>=
<symbol>(
<symbol>[
<symbol>]
<symbol>)
<symbol>;
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>>
<symbol>;
<keyword>return
<symbol>;
<symbol>}
<symbol>}
<keyword>return
<symbol>;
<symbol>}
<symbol>(
<keyword>const
<symbol>*
<symbol>,
<symbol>*
<symbol>)
<symbol>{
<keyword>char
<symbol>*
<symbol>;
<keyword>char
<symbol>*
<symbol>;
<keyword>char
<symbol>[
<symbol>(
<symbol>)
<symbol>]
<symbol>=
<symbol>{
<symbol>}
<symbol>;
<symbol>(
<symbol>,
<symbol>-
<symbol>>
<symbol>,
<symbol>(
<symbol>-
<symbol>>
<symbol>,
<symbol>(
<symbol>)
<symbol>-
<symbol>)
<symbol>)
<symbol>;
<keyword>if
<symbol>(
<symbol>(
<symbol>=
<symbol>(
<symbol>,
<string literal>"#"
<symbol>)
<symbol>)
<symbol>!
<symbol>=
<symbol>)
<symbol>{
<keyword>for
<symbol>(
<symbol>-
<symbol>-
<symbol>;
<symbol>>
<symbol>&
<symbol>&
<symbol>(
<symbol>*
<symbol>)
<symbol>;
<symbol>-
<symbol>-
<symbol>)
<symbol>;
<comment>/* Needs to be a newline followed by any amount of whitespace, then '#'. */
<keyword>if
<symbol>(
<symbol>*
<symbol>!
<symbol>=
<character literal>'\n'
<symbol>&
<symbol>&
<symbol>*
<symbol>!
<symbol>=
<character literal>'\0'
<symbol>)
<keyword>return
<symbol>;
<symbol>+
<symbol>+
<symbol>;
<symbol>=
<symbol>;
<symbol>(
<symbol>)
<symbol>{
<keyword>if
<symbol>(
<symbol>>
<symbol>=
<symbol>+
<symbol>(
<symbol>)
<symbol>)
<keyword>return
<symbol>;
<keyword>if
<symbol>(
<symbol>*
<symbol>=
<symbol>=
<character literal>'\n'
<symbol>&
<symbol>&
<symbol>*
<symbol>(
<symbol>-
<symbol>)
<symbol>!
<symbol>=
<symbol>'
<symbol>'
<symbol>)
<keyword>break
<symbol>;
<symbol>+
<symbol>+
<symbol>;
<symbol>}
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>>
<symbol>+
<symbol>(
<symbol>-
<symbol>)
<symbol>;
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>;
<symbol>-
<symbol>>
<symbol>=
<symbol>-
<symbol>>
<symbol>;
<keyword>return
<symbol>;
<symbol>}
<symbol>}
<keyword>void
<symbol>(
<symbol>*
<symbol>,
<keyword>int
<symbol>)
<symbol>{
<symbol>-
<symbol>>
<symbol>+
<symbol>=
<symbol>;
<symbol>-
<symbol>>
<symbol>-
<symbol>=
<symbol>;
<symbol>-
<symbol>>
<symbol>-
<symbol>=
<symbol>;
<symbol>}
<keyword>int
<symbol>(
<symbol>,
<keyword>char
<symbol>*
<symbol>[
<symbol>]
<symbol>)
<symbol>{
<keyword>if
<symbol>(
<symbol>!
<symbol>=
<symbol>|
<symbol>|
<symbol>[
<symbol>]
<symbol>=
<symbol>=
<string literal>"-h"
<symbol>|
<symbol>|
<symbol>[
<symbol>]
<symbol>=
<symbol>=
<string literal>"--help"
<symbol>)
<symbol>(
<symbol>)
<symbol>;
<keyword>char
<symbol>[
<symbol>]
<symbol>=
<symbol>{
<symbol>}
<symbol>;
<symbol>;
<symbol>(
<symbol>&
<symbol>,
<symbol>,
<symbol>,
<symbol>)
<symbol>;
<symbol>*
<symbol>=
<symbol>(
<symbol>[
<symbol>]
<symbol>,
<string literal>"r"
<symbol>)
<symbol>;
<comment>/* argv[1] is the input file name. */
<keyword>if
<symbol>(
<symbol>(
<symbol>,
<symbol>&
<symbol>)
<symbol>!
<symbol>=
<symbol>)
<symbol>(
<string literal>"Couldn't copy entire file to buffer"
<symbol>)
<symbol>;
<keyword>char
<keyword>int
<symbol>[
<symbol>(
<symbol>)
<symbol>]
<symbol>=
<symbol>{
<symbol>}
<symbol>;
<keyword>int
<symbol>=
<symbol>;
<keyword>while
<symbol>(
<symbol>.
<symbol>>
<symbol>)
<symbol>{
<symbol>;
<keyword>if
<symbol>(
<symbol>(
<symbol>&
<symbol>,
<symbol>&
<symbol>)
<symbol>&
<symbol>&
<symbol>.
<symbol>=
<symbol>=
<symbol>.
<symbol>)
<symbol>{
<keyword>int
<symbol>(
<keyword>int
<symbol>,
<symbol>.
<symbol>+
<symbol>(
<string literal>"<keyword>"
<symbol>)
<symbol>+
<symbol>,
<string literal>"<keyword>%s"
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>(
<keyword>int
<symbol>)
<symbol>;
<symbol>(
<symbol>&
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>+
<symbol>=
<symbol>.
<symbol>;
<symbol>}
<keyword>else
<symbol>(
<keyword>char
<symbol>(
<symbol>&
<symbol>,
<symbol>&
<symbol>)
<symbol>&
<symbol>&
<symbol>.
<symbol>=
<symbol>=
<symbol>.
<symbol>)
<symbol>{
<keyword>int
<symbol>(
<keyword>int
<symbol>,
<symbol>.
<symbol>+
<symbol>(
<string literal>"<character literal>"
<symbol>)
<symbol>+
<symbol>,
<string literal>"<character literal>%s"
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>(
<keyword>int
<symbol>)
<symbol>;
<symbol>(
<symbol>&
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>+
<symbol>=
<symbol>.
<symbol>;
<symbol>}
<keyword>else
<keyword>if
<symbol>(
<symbol>(
<symbol>&
<symbol>,
<symbol>&
<symbol>)
<symbol>&
<symbol>&
<symbol>.
<symbol>=
<symbol>=
<symbol>.
<symbol>)
<symbol>{
<keyword>int
<symbol>(
<keyword>int
<symbol>,
<symbol>.
<symbol>+
<symbol>(
<string literal>"<comment>"
<symbol>)
<symbol>+
<symbol>,
<string literal>"<comment>%s"
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>(
<keyword>int
<symbol>)
<symbol>;
<symbol>(
<symbol>&
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>+
<symbol>=
<symbol>.
<symbol>;
<symbol>}
<keyword>else
<keyword>if
<symbol>(
<symbol>(
<symbol>&
<symbol>,
<symbol>&
<symbol>)
<symbol>&
<symbol>&
<symbol>.
<symbol>=
<symbol>=
<symbol>.
<symbol>)
<symbol>{
<keyword>int
<symbol>(
<keyword>int
<symbol>,
<symbol>.
<symbol>+
<symbol>(
<string literal>"<string literal>"
<symbol>)
<symbol>+
<symbol>,
<string literal>"<string literal>%s"
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>(
<keyword>int
<symbol>)
<symbol>;
<symbol>(
<symbol>&
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>+
<symbol>=
<symbol>.
<symbol>;
<symbol>}
<keyword>else
<keyword>if
<symbol>(
<symbol>(
<symbol>&
<symbol>,
<symbol>&
<symbol>)
<symbol>&
<symbol>&
<symbol>.
<symbol>=
<symbol>=
<symbol>.
<symbol>)
<symbol>{
<keyword>int
<symbol>(
<keyword>int
<symbol>,
<symbol>.
<symbol>+
<symbol>(
<string literal>"<preprocessor command>"
<symbol>)
<symbol>+
<symbol>,
<string literal>"<preprocessor command>%s"
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>(
<keyword>int
<symbol>)
<symbol>;
<symbol>(
<symbol>&
<symbol>,
<symbol>.
<symbol>)
<symbol>;
<symbol>+
<symbol>=
<symbol>.
<symbol>;
<symbol>}
<keyword>else
<keyword>if
<symbol>(
<symbol>(
<symbol>.
<symbol>[
<symbol>]
<symbol>)
<symbol>)
<symbol>{
<keyword>int
<symbol>(
<keyword>int
<symbol>,
<symbol>+
<symbol>(
<string literal>"<symbol>"
<symbol>)
<symbol>,
<string literal>"<symbol>%c"
<symbol>,
<symbol>.
<symbol>[
<symbol>]
<symbol>)
<symbol>;
<symbol>(
<keyword>int
<symbol>)
<symbol>;
<symbol>(
<symbol>&
<symbol>,
<symbol>)
<symbol>;
<symbol>+
<symbol>=
<symbol>;
<symbol>}
<keyword>else
<symbol>{
<comment>/* printf("No token found at character [%u]\n", pos); */
<symbol>(
<symbol>&
<symbol>,
<symbol>)
<symbol>;
<symbol>+
<symbol>=
<symbol>;
<symbol>}
<symbol>}
<keyword>return
<symbol>;
<symbol>}
