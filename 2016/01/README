2016-01-16:
-----------
UDP Virtual Connection
Models a virtual connection between 1 client and 1 server only.  No multiple clients business.
If a long enough period of time remains, then the virtual connection is broken.
The first message that is received with the correct protocol ID establishes the connection.

2016-01-15:
-----------
IPV4 Networking - Actually Working!
I did a little research on the way in this morning and realized I was incorrectly binding the client socket.
I removed that and included <arpa/inet.h> so I could directly translate a dotted IP string to network binary; and voila!

2016-01-14-2:
-------------
IPV4 Networking.
This is an attempt to get non-Unix-Domain sockets working.
Initially I tried getting two separate machines on the same internal network talking with each other. Each machine ran it's corresponding program just fine, but no messages seemed to be getting through.
Afterwards I attempted to get both the client and server running on a single machine again but this fails as it did before - can't bind a socket to an address that's in use.
I'll continue investigating tomorrow and see if I can make any progress.

2016-01-14:
-----------
Signal trapping.
This is a modification from 2016-01-11.
- Implements proper signal trapping in server.c so the socket file cleans up properly.
- Uses stdlib.h in client.c for consistent exit(CODE) implementation.

2016-01-11:
-----------
Unix Sockets.
I don't know how to clean up the socket file when terminating the server.
The server does a double forever loop and exits out when the signal ctrl+C is sent.
Whenever I figure out how to do signal trapping in C, then I'll fix that.
This project is the result of my investigation to client-server socket communication on a single host.

2016-01-08:
-----------
Socket programming introduction thanks to Gaffer on Games (http://gafferongames.com/networking-for-game-programmers/sending-and-receiving-packets/)
This is a straight-up copy of the sample code from Glenn Fiedler, with a super light API thrown on top of init and send.
The API is not great and not complete, but it works for what I wanted.

2016-01-07:
-----------
Investigation of changing framebuffer settings.
Learned:
  - `ioctl' is a general purpose mechanism for interacting with non-standard components. ie., Framebuffer.
  - fbset is a program that reports information for the specified framebuffer (/dev/fb0)
  - fbset presumably lets you modify framebuffer settings, though I couldn't get it to work.
  - It looks like you have to modify boot parameters to choose different framebuffer settings.
  - Framebuffer settings are not completely customizable.
    (https://www.raspberrypi.org/forums/viewtopic.php?t=30038&p=267956)
    Apparently the maximum supported vertical resolution is 1200?
All this is leading me to think that using the framebuffer is not a *great* solution, unless "standard"
resolutions like 800x600 or 1024x768 are okay.  1280x720 isn't in my `/etc/fb.modes', for instance.

2016-01-06:
-----------
Direct framebuffer graphics programming!

This is a quick 'n dirty hack job, just throwing together scraps that I could quickly find online.
It does follow reading about framebuffer stuff on and off for a while.
The code is really dirty and expects a resolution of 800x600.

2016-01-05:
-----------
Tinkering with the Atari ST. Nothing to show, but I'll recap.
I followed the ASM intro here: http://www.voidbred.com/blog/2014/09/programming-the-atari-st-20-years-later/
Some tinkering with that, but only very minorly.
Grabbed Hisoft's C from here: http://www.atarimania.com/utility-atari-st-hisoft-c_s20885.html
Opened the PDF and implemented "Your first program." Played with the trace functionality and interpreter just briefly.
Realized I need to make a custom keyboard mapping for Hatari + my Kinesis Advantage keyboard.